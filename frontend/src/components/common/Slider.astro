---
import Icon from 'astro-icon';

interface Props {
  amount: number;
  class?: string;
}

const id = Math.random()
  .toString(36)
  .replace(/[^a-z]+/g, '');
const { amount, class: classes } = Astro.props;
---

<div class={`slider relative ${classes}`} id={id}>
  <div class="slides">
    <slot />
  </div>
  <div class="dots">
    {[...Array(amount)].map(() => <span class="dot" />)}
  </div>
  <Icon
    id={`${id}-right`}
    name="akar-icons:chevron-right"
    class="hidden lg:block w-20 text-white absolute right-0 top-1/2 -translate-y-full cursor-pointer"
  />
  <Icon
    id={`${id}-left`}
    name="akar-icons:chevron-left"
    class="hidden lg:block w-20 text-white absolute left-0 top-1/2 -translate-y-full cursor-pointer"
  />
</div>

<style is:global>
  .slider {
    overflow: hidden;
  }

  .slides {
    display: flex;
    margin-bottom: 20px;

    overflow-scrolling: touch;
    -webkit-overflow-scrolling: touch;
    overflow-anchor: none;
    overflow-x: scroll;
    overflow-y: hidden;

    scroll-snap-type: x mandatory;
    scroll-snap-stop: normal;
    scroll-behavior: smooth;
  }

  .slides::-webkit-scrollbar {
    display: none;
  }

  .slides > div {
    scroll-snap-align: start;
    flex-shrink: 0;
    margin-right: 50px;
    border-radius: 10px;
    transform-origin: center center;
    transform: scale(1);
    transition: transform 0.5s;
    position: relative;
  }

  .dots {
    display: flex;
    justify-content: center;
    gap: 10px;
  }

  .dot {
    height: 10px;
    width: 10px;
    border-radius: 20px;
    border: 2px solid white;
  }

  .active {
    background-color: white;
  }
</style>

<script is:inline define:vars={{ id }}>
  const initializeSlider = (id) => {
    let activeIndex = 0;

    const container = document.querySelector(`#${id}>.slides`);
    const elements = [...document.querySelectorAll(`#${id}>.slides>*`)];
    const dots = [...document.querySelectorAll(`#${id}>.dots>*`)];
    const left = document.querySelector(`#${id}-left`);
    const right = document.querySelector(`#${id}-right`);

    const scrollTo = (i) => {
      const left = (elements[0].scrollWidth + 50) * Math.abs(activeIndex - i);
      container.scrollBy({ left: activeIndex > i ? -left : left, behavior: 'smooth' });
    };

    left.addEventListener('click', () => {
      const newIndex = (activeIndex - 1) % elements.length;
      scrollTo(newIndex < 0 ? elements.length - 1 : newIndex);
    });
    right.addEventListener('click', () => scrollTo((activeIndex + 1) % elements.length));

    let interval;
    const resetAutoPlay = () => {
      clearInterval(interval);
      interval = setInterval(() => scrollTo((activeIndex + 1) % elements.length), 10000);
    };

    dots.forEach((dot, i) => dot.addEventListener('click', () => scrollTo(i)));

    const handleIntersect = (entries) => {
      const entry = entries.find((e) => e.isIntersecting);
      if (entry) {
        dots[activeIndex].classList.remove('active');
        activeIndex = elements.findIndex((e) => e === entry.target);
        dots[activeIndex].classList.add('active');
        resetAutoPlay();
      }
    };

    const observer = new IntersectionObserver(handleIntersect, {
      root: container,
      rootMargin: '0px',
      threshold: 0.75,
    });

    elements.forEach((el) => observer.observe(el));
    resetAutoPlay();
  };

  initializeSlider(id);
</script>
